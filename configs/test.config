//includeConfig "${projectDir}/configs/singularity.config"
//includeConfig "${projectDir}/configs/containers.config"

params {

  // input data
  pe = true                               // optional: true, false [dfault: false]   (Whether reads are paired-end or single end)
  exome = true                            // for manta structural variant calling, specify whether WES or WGS
  spark = false                           // Select GATK spark mode to run GATK commands with multi-threading (true) or not (false)
  aligner = 'BWA'                         // optional: BWA, DRAGMAP [default: BWA]
  input_ftype = 'FASTQ'                   // required: FASTQ, BAM, CRAM     (input file type)
  input_dir = '/path/to/fastq/'           // required
  output_dir = '/path/to/save/results/'   // required
  output_prefix = 'my-ngs'                // required
  single_caller = 'gatk'                  // options: gatk, deepvariant, dysgu, manta
  joint_caller = 'gatk'                   // options: gatk, glnexus
  gvcf_dir = 'NULL'                       // if GVCF files already exist and only joint calling is required
  threads = 1
  njobs=1
}

process {
    cpus = 40
    time = 1.h
    memory = 50.GB

    clusterOptions = '--account humgen --partition sadacc-long --nodes=1'

    errorStrategy = { task.exitStatus in [127,135,139,140,143,245,255] ? 'retry' : 'terminate' }
    maxErrors = '-1'
    maxRetries = 3
    
    // Resources
    withLabel:smallMemory {
        cpus = 4
        time = 5.m
        memory = 2.GB
    }
    withLabel:mediumMemory {
        cpus = 4
        time = { 5.m * task.attempt }
        memory = { 1.GB * task.attempt }
    }
    withLabel:bigMemory {
        time = { 15.m * task.attempt }
        cpus = 4
        memory = { 90.GB * task.attempt }
    }
    withLabel:longRun {
        time = 10.h
        cpus = 4
        memory = 90.GB
    }
    withLabel:fastqcMem {
        time = 5.h
        cpus = 4
        memory = 25.GB
    }
    withLabel:multiqcMem {
        time = 1.h
        cpus = 4
        memory = 10.GB
    }
    withLabel:readAligner {
        time = 30.h
        cpus = 4
        memory = { 90.GB * task.attempt }
    }
    withLabel:samConverter {
        cpus = 4
        time = { 8.h * task.attempt }
        memory = { 50.GB * task.attempt }
    }
    withLabel:bamSorter {
        time = { 8.h * task.attempt }
        cpus = 4
        memory = { 50.GB * task.attempt }
    }
    withLabel:bamIndexer {
        time = 1.h
        cpus = 4
        memory = 25.GB
    }
    withLabel:fixBam {
        time = { 1.h * task.attempt }
        cpus = 4
        memory = { 100.GB * task.attempt }
    }
    withLabel:duplicateMarker {
        time = { 12.h * task.attempt }
        cpus = 4
        memory = { 90.GB * task.attempt }
    }
    withLabel:duplicateMarkerSpark {
        time = { 30.h * task.attempt }
        cpus = 2
        memory = { 90.GB * task.attempt }
    }
    withLabel:baseRecalibrator {
        time = 12.h
        cpus = 4
        memory = 90.GB
    }
    withLabel:baseRecalibratorSpark {
        time = { 4.h * task.attempt }
        cpus = 2
        memory = { 15.GB * task.attempt }
    }
    withLabel:applyBqsr {
        time = { 24.h * task.attempt }
        cpus = 4
        memory = { 50.GB * task.attempt }
    }
    withLabel:variantCaller {
        time = { 130.h * task.attempt }
        cpus = 4
        memory = { 100.GB * task.attempt }
    }
    withLabel:vqsr {
        cpus = 4
        time = { 48.h * task.attempt }
        memory = { 50.GB * task.attempt }
    }
    withLabel:applyVqsr {
        cpus = 4
        time = { 48.h * task.attempt }
        memory = { 50.GB * task.attempt }
    }
    withLabel:annovarMem {
        cpus = 4
        time = 24.h
        memory = 90.GB
    }
    withLabel:deepv_caller {
        cpus = 4
        time = { 30.h * task.attempt }
        memory = { 50.GB * task.attempt }
    }
    withLabel:nexus_caller {
        cpus = 4
        time = { 25.h * task.attempt }
        memory = { 50.GB * task.attempt }
    }
    withLabel:dysgu_caller {
        cpus = 4
        time = { 25.h * task.attempt }
        memory = { 50.GB * task.attempt }
    }
}

