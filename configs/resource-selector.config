process {
  beforeScript = 'ulimit -c unlimited; hostname; date; pwd'

  // ERROR HANDLING
  errorStrategy = { task.exitStatus in [1,2,3,4,5,6,126,127,134,135,136,137,139,140,143,245,247,249,250,255] ? 'retry' : 'terminate' }
  maxErrors = '-1'
  maxRetries = 20
  
  // RESOURCE MANAGEMENT //
  withLabel:smallMemory {
      cpus = 11
      time = 5.m
      memory = 2.GB
  }
  withLabel:mediumMemory {
      cpus = 22
      time = { 5.m * task.attempt }
      memory = 1.GB
  }
  withLabel:bigMemory {
      time = { 15.m * task.attempt }
      cpus = { params.threads }
      memory = 90.GB
  }
  withLabel:longRun {
      time = 10.h
      cpus = 24
      memory = 90.GB
  }
  withLabel:fastqcMem {
      time = { 4.h * task.attempt }
      cpus = { params.threads }
      memory = 5.GB
  }
  withLabel:multiqcMem {
      time = { 2.h * task.attempt }
      cpus = 8
      memory = 10.GB
  }
  withLabel:readAligner {
      time = { 20.h * task.attempt }
      cpus = { params.threads }
      memory = 15.GB
  }
  withLabel:samConverter {
      cpus = { params.threads }
      time = 8.h
      memory = 30.GB
  }
  withLabel:bamSorter {
      time = { 30.m * task.attempt }
      cpus = { params.threads }
      memory = 20.GB
  }
  withLabel:bamIndexer {
      time = 10.m
      cpus = { params.threads }
      memory = 1.GB
  }
  withLabel:fixBam {
      time = { 1.h * task.attempt }
      cpus = { params.threads }
      memory = 6.GB
  }
  withLabel:duplicateMarker {
      time = { 1.h * task.attempt }
      cpus = { params.threads }
      memory = 5.GB
  }
  withLabel:duplicateMarkerSpark {
      time = { 30.h * task.attempt }
      cpus = 2
      memory = 50.GB
  }
  withLabel:baseRecalibrator {
      time = { 12.h * task.attempt }
      cpus = { params.threads }
      memory = 30.GB
  }
  withLabel:baseRecalibratorSpark {
      time = { 4.h * task.attempt }
      cpus = 2
      memory = 20.GB
  }
  withLabel:applyBqsr {
      time = { 15.h * task.attempt }
      cpus = { params.threads }
      memory = 30.GB
  }
  withLabel:variantCaller {
      time = { 24.h * task.attempt }
      cpus = { params.threads }
      memory = 50.GB
  }
  withLabel:vqsr {
      cpus = { params.threads }
      time = { 12.h * task.attempt }
      memory = 50.GB
  }
  withLabel:applyVqsr {
      cpus = { params.threads }
      time = { 12.h * task.attempt }
      memory = 50.GB
  }
  withLabel:annovarMem {
      cpus = { params.threads }
      time = { 12.h * task.attempt }
      memory = 90.GB
  }
  withLabel:deepv_caller {
      cpus = { params.threads }
      time = { 30.h * task.attempt }
      memory = { 50.GB * task.attempt }
  }
  withLabel:nexus_caller {
      cpus = { params.threads }
      time = { 25.h * task.attempt }
      memory = 50.GB
  }
  withLabel:dysgu_caller {
      cpus = { params.threads }
      time = { 25.h * task.attempt }
      memory = 50.GB
  }
}

